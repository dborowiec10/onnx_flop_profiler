graph vgg19 (
  %input_2[FLOAT, Nx224x224x3]
) initializers (
  %predictions_1/kernel:0[FLOAT, 4096x1000]
  %predictions_1/bias:0[FLOAT, 1000]
  %fc2_1/kernel:0[FLOAT, 4096x4096]
  %fc2_1/bias:0[FLOAT, 4096]
  %fc1_1/kernel:0[FLOAT, 25088x4096]
  %fc1_1/bias:0[FLOAT, 4096]
  %block5_conv4/kernel:0[FLOAT, 512x512x3x3]
  %block5_conv4/bias:0[FLOAT, 512]
  %block5_conv3_1/kernel:0[FLOAT, 512x512x3x3]
  %block5_conv3_1/bias:0[FLOAT, 512]
  %block5_conv2_1/kernel:0[FLOAT, 512x512x3x3]
  %block5_conv2_1/bias:0[FLOAT, 512]
  %block5_conv1_1/kernel:0[FLOAT, 512x512x3x3]
  %block5_conv1_1/bias:0[FLOAT, 512]
  %block4_conv4/kernel:0[FLOAT, 512x512x3x3]
  %block4_conv4/bias:0[FLOAT, 512]
  %block4_conv3_1/kernel:0[FLOAT, 512x512x3x3]
  %block4_conv3_1/bias:0[FLOAT, 512]
  %block4_conv2_1/kernel:0[FLOAT, 512x512x3x3]
  %block4_conv2_1/bias:0[FLOAT, 512]
  %block4_conv1_1/kernel:0[FLOAT, 512x256x3x3]
  %block4_conv1_1/bias:0[FLOAT, 512]
  %block3_conv4/kernel:0[FLOAT, 256x256x3x3]
  %block3_conv4/bias:0[FLOAT, 256]
  %block3_conv3_1/kernel:0[FLOAT, 256x256x3x3]
  %block3_conv3_1/bias:0[FLOAT, 256]
  %block3_conv2_1/kernel:0[FLOAT, 256x256x3x3]
  %block3_conv2_1/bias:0[FLOAT, 256]
  %block3_conv1_1/kernel:0[FLOAT, 256x128x3x3]
  %block3_conv1_1/bias:0[FLOAT, 256]
  %block2_conv2_1/kernel:0[FLOAT, 128x128x3x3]
  %block2_conv2_1/bias:0[FLOAT, 128]
  %block2_conv1_1/kernel:0[FLOAT, 128x64x3x3]
  %block2_conv1_1/bias:0[FLOAT, 128]
  %block1_conv2_1/kernel:0[FLOAT, 64x64x3x3]
  %block1_conv2_1/bias:0[FLOAT, 64]
  %block1_conv1_1/kernel:0[FLOAT, 64x3x3x3]
  %block1_conv1_1/bias:0[FLOAT, 64]
) {
  %adjusted_input15 = Transpose[perm = [0, 3, 1, 2]](%input_2)
  %convolution_output15 = Conv[auto_pad = 'NOTSET', dilations = [1, 1], group = 1, kernel_shape = [3, 3], pads = [1, 1, 1, 1], strides = [1, 1]](%adjusted_input15, %block1_conv1_1/kernel:0, %block1_conv1_1/bias:0)
  %block1_conv1_1/Relu:0 = Relu(%convolution_output15)
  %convolution_output14 = Conv[auto_pad = 'NOTSET', dilations = [1, 1], group = 1, kernel_shape = [3, 3], pads = [1, 1, 1, 1], strides = [1, 1]](%block1_conv1_1/Relu:0, %block1_conv2_1/kernel:0, %block1_conv2_1/bias:0)
  %block1_conv2_1/Relu:0 = Relu(%convolution_output14)
  %block1_conv2_1/Relu:0_pooling0 = MaxPool[auto_pad = 'VALID', ceil_mode = 0, kernel_shape = [2, 2], strides = [2, 2]](%block1_conv2_1/Relu:0)
  %convolution_output13 = Conv[auto_pad = 'NOTSET', dilations = [1, 1], group = 1, kernel_shape = [3, 3], pads = [1, 1, 1, 1], strides = [1, 1]](%block1_conv2_1/Relu:0_pooling0, %block2_conv1_1/kernel:0, %block2_conv1_1/bias:0)
  %block2_conv1_1/Relu:0 = Relu(%convolution_output13)
  %convolution_output12 = Conv[auto_pad = 'NOTSET', dilations = [1, 1], group = 1, kernel_shape = [3, 3], pads = [1, 1, 1, 1], strides = [1, 1]](%block2_conv1_1/Relu:0, %block2_conv2_1/kernel:0, %block2_conv2_1/bias:0)
  %block2_conv2_1/Relu:0 = Relu(%convolution_output12)
  %block2_conv2_1/Relu:0_pooling0 = MaxPool[auto_pad = 'VALID', ceil_mode = 0, kernel_shape = [2, 2], strides = [2, 2]](%block2_conv2_1/Relu:0)
  %convolution_output11 = Conv[auto_pad = 'NOTSET', dilations = [1, 1], group = 1, kernel_shape = [3, 3], pads = [1, 1, 1, 1], strides = [1, 1]](%block2_conv2_1/Relu:0_pooling0, %block3_conv1_1/kernel:0, %block3_conv1_1/bias:0)
  %block3_conv1_1/Relu:0 = Relu(%convolution_output11)
  %convolution_output10 = Conv[auto_pad = 'NOTSET', dilations = [1, 1], group = 1, kernel_shape = [3, 3], pads = [1, 1, 1, 1], strides = [1, 1]](%block3_conv1_1/Relu:0, %block3_conv2_1/kernel:0, %block3_conv2_1/bias:0)
  %block3_conv2_1/Relu:0 = Relu(%convolution_output10)
  %convolution_output9 = Conv[auto_pad = 'NOTSET', dilations = [1, 1], group = 1, kernel_shape = [3, 3], pads = [1, 1, 1, 1], strides = [1, 1]](%block3_conv2_1/Relu:0, %block3_conv3_1/kernel:0, %block3_conv3_1/bias:0)
  %block3_conv3_1/Relu:0 = Relu(%convolution_output9)
  %convolution_output8 = Conv[auto_pad = 'NOTSET', dilations = [1, 1], group = 1, kernel_shape = [3, 3], pads = [1, 1, 1, 1], strides = [1, 1]](%block3_conv3_1/Relu:0, %block3_conv4/kernel:0, %block3_conv4/bias:0)
  %block3_conv4/Relu:0 = Relu(%convolution_output8)
  %block3_conv4/Relu:0_pooling0 = MaxPool[auto_pad = 'VALID', ceil_mode = 0, kernel_shape = [2, 2], strides = [2, 2]](%block3_conv4/Relu:0)
  %convolution_output7 = Conv[auto_pad = 'NOTSET', dilations = [1, 1], group = 1, kernel_shape = [3, 3], pads = [1, 1, 1, 1], strides = [1, 1]](%block3_conv4/Relu:0_pooling0, %block4_conv1_1/kernel:0, %block4_conv1_1/bias:0)
  %block4_conv1_1/Relu:0 = Relu(%convolution_output7)
  %convolution_output6 = Conv[auto_pad = 'NOTSET', dilations = [1, 1], group = 1, kernel_shape = [3, 3], pads = [1, 1, 1, 1], strides = [1, 1]](%block4_conv1_1/Relu:0, %block4_conv2_1/kernel:0, %block4_conv2_1/bias:0)
  %block4_conv2_1/Relu:0 = Relu(%convolution_output6)
  %convolution_output5 = Conv[auto_pad = 'NOTSET', dilations = [1, 1], group = 1, kernel_shape = [3, 3], pads = [1, 1, 1, 1], strides = [1, 1]](%block4_conv2_1/Relu:0, %block4_conv3_1/kernel:0, %block4_conv3_1/bias:0)
  %block4_conv3_1/Relu:0 = Relu(%convolution_output5)
  %convolution_output4 = Conv[auto_pad = 'NOTSET', dilations = [1, 1], group = 1, kernel_shape = [3, 3], pads = [1, 1, 1, 1], strides = [1, 1]](%block4_conv3_1/Relu:0, %block4_conv4/kernel:0, %block4_conv4/bias:0)
  %block4_conv4/Relu:0 = Relu(%convolution_output4)
  %block4_conv4/Relu:0_pooling0 = MaxPool[auto_pad = 'VALID', ceil_mode = 0, kernel_shape = [2, 2], strides = [2, 2]](%block4_conv4/Relu:0)
  %convolution_output3 = Conv[auto_pad = 'NOTSET', dilations = [1, 1], group = 1, kernel_shape = [3, 3], pads = [1, 1, 1, 1], strides = [1, 1]](%block4_conv4/Relu:0_pooling0, %block5_conv1_1/kernel:0, %block5_conv1_1/bias:0)
  %block5_conv1_1/Relu:0 = Relu(%convolution_output3)
  %convolution_output2 = Conv[auto_pad = 'NOTSET', dilations = [1, 1], group = 1, kernel_shape = [3, 3], pads = [1, 1, 1, 1], strides = [1, 1]](%block5_conv1_1/Relu:0, %block5_conv2_1/kernel:0, %block5_conv2_1/bias:0)
  %block5_conv2_1/Relu:0 = Relu(%convolution_output2)
  %convolution_output1 = Conv[auto_pad = 'NOTSET', dilations = [1, 1], group = 1, kernel_shape = [3, 3], pads = [1, 1, 1, 1], strides = [1, 1]](%block5_conv2_1/Relu:0, %block5_conv3_1/kernel:0, %block5_conv3_1/bias:0)
  %block5_conv3_1/Relu:0 = Relu(%convolution_output1)
  %convolution_output = Conv[auto_pad = 'NOTSET', dilations = [1, 1], group = 1, kernel_shape = [3, 3], pads = [1, 1, 1, 1], strides = [1, 1]](%block5_conv3_1/Relu:0, %block5_conv4/kernel:0, %block5_conv4/bias:0)
  %block5_conv4/Relu:0 = Relu(%convolution_output)
  %block5_conv4/Relu:0_pooling0 = MaxPool[auto_pad = 'VALID', ceil_mode = 0, kernel_shape = [2, 2], strides = [2, 2]](%block5_conv4/Relu:0)
  %block5_conv4/Relu:0_transpose0 = Transpose[perm = [0, 2, 3, 1]](%block5_conv4/Relu:0_pooling0)
  %flatten_1/Reshape:0 = Flatten(%block5_conv4/Relu:0_transpose0)
  %transformed_tensor2 = MatMul(%flatten_1/Reshape:0, %fc1_1/kernel:0)
  %biased_tensor_name2 = Add(%transformed_tensor2, %fc1_1/bias:0)
  %fc1_1/Relu:0 = Relu(%biased_tensor_name2)
  %transformed_tensor1 = MatMul(%fc1_1/Relu:0, %fc2_1/kernel:0)
  %biased_tensor_name1 = Add(%transformed_tensor1, %fc2_1/bias:0)
  %fc2_1/Relu:0 = Relu(%biased_tensor_name1)
  %transformed_tensor = MatMul(%fc2_1/Relu:0, %predictions_1/kernel:0)
  %biased_tensor_name = Add(%transformed_tensor, %predictions_1/bias:0)
  %predictions_1/Softmax:01 = Softmax[axis = -1](%biased_tensor_name)
  %predictions = Identity(%predictions_1/Softmax:01)
  return %predictions
}